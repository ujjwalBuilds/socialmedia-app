plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    // END: FlutterFire Configuration
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

android {
    namespace = "com.ancoway.ancowayonline"
    compileSdk = 35
    ndkVersion = flutter.ndkVersion

    compileOptions {
       
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.ancoway.ancowayonline"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = 21
        targetSdk = 35
        versionCode = flutter.versionCode
        versionName = flutter.versionName
        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64', 'x86'
        }
    }
    
    ndkVersion "25.1.8937393"

    def keystoreProperties = new Properties()
    def keystorePropertiesFile = new File('key.properties')
    if (keystorePropertiesFile.exists()) {
    println "Found key.properties at: ${keystorePropertiesFile.absolutePath}"
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    } else {
    println "ERROR: key.properties not found at: ${keystorePropertiesFile.absolutePath}"
    println "Current directory: ${new File('.').absolutePath}"
    }

    signingConfigs {
    release {
        // Add debugging to see what's being loaded
        println "keyAlias value: ${keystoreProperties['keyAlias']}"
        println "keyPassword value: ${keystoreProperties['keyPassword']}"
        println "storeFile value: ${keystoreProperties['storeFile']}"
        println "storePassword value: ${keystoreProperties['storePassword']}"
        
        // Add null checks to prevent the error
        if (keystoreProperties['keyAlias'] != null) {
            keyAlias keystoreProperties['keyAlias']
        } else {
            println "WARNING: keyAlias is null"
        }
        
        if (keystoreProperties['keyPassword'] != null) {
            keyPassword keystoreProperties['keyPassword']
        } else {
            println "WARNING: keyPassword is null"
        }
        
        if (keystoreProperties['storeFile'] != null && !keystoreProperties['storeFile'].isEmpty()) {
            storeFile file(keystoreProperties['storeFile'])
        } else {
            println "WARNING: storeFile is null or empty"
        }
        
        if (keystoreProperties['storePassword'] != null) {
            storePassword keystoreProperties['storePassword']
        } else {
            println "WARNING: storePassword is null"
        }
    }
}


    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    // âœ… Correct way to add core library desugaring
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:2.0.3"
    implementation "androidx.core:core-ktx:1.9.0" 

    // Keep existing dependencies
}


flutter {
    source = "../.."
}
